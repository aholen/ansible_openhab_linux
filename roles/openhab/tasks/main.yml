
- name: install openHAB runtime
  include: install_openhab_component.yml component=runtime

- name: install openHAB addons
  include: install_openhab_component.yml component=addons

- name: remove everything from the addons-folder
  shell: "rm {{ openhab_install_dir }}/runtime/{{openhab_version}}/addons/*"

- name: link bindings into runtime
  file: >
    state=link
    src={{ openhab_install_dir }}/addons/{{openhab_version}}/org.openhab.{{ item }}-{{openhab_version}}.jar
    dest={{ openhab_install_dir }}/runtime/{{openhab_version}}/addons/org.openhab.{{ item }}-{{openhab_version}}.jar
  with_items:
    - binding.http
    - binding.networkhealth
    - binding.ntp
    - binding.rfxcom
    - binding.samsungtv
    - binding.samsungac
    - binding.systeminfo
    - binding.plex
    - binding.denon
    - persistence.rrd4j
    - persistence.logging
    - persistence.mqtt
    - action.pushover
    - binding.configadmin
    - binding.astro
    - binding.hue
    - binding.systeminfo

- name: install sigar
  include: install_sigar.yml

- name: download my.openhab jar
  get_url: >
    url=https://bintray.com/artifact/download/openhab/mvn/org/openhab/io/org.openhab.io.myopenhab/1.7.0/org.openhab.io.myopenhab-1.7.0.jar
    dest={{ openhab_install_dir }}/addons/{{openhab_version}}/
    validate_certs=no

- name: link to my.openhab jar
  file: >
    state=link
    src={{ openhab_install_dir }}/addons/{{openhab_version}}/org.openhab.io.myopenhab-1.7.0.jar
    dest={{ openhab_install_dir }}/runtime/{{openhab_version}}/addons/org.openhab.io.myopenhab-1.7.0.jar

- name: See if configurations is a directory (then we nuke it next)
  shell: "[ -d {{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations ] && echo 'Directory' || echo ''"
  register: is_directory

- name: delete example config directory
  file: path={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations state=absent
  when: (is_directory.stdout)

- name: create openHAB configurations directory
  file: >
    state=directory
    path={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations

- name: create openHAB configurations/items directory
  file: >
    state=directory
    path={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations/items

- name: create openHAB configurations/persistence directory
  file: >
    state=directory
    path={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations/persistence

- name: create openHAB configurations/transform directory
  file: >
    state=directory
    path={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations/transform

- name: create openHAB configurations/rules directory
  file: >
    state=directory
    path={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations/rules

- name: create openHAB configurations/scripts directory
  file: >
    state=directory
    path={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations/scripts

- name: create openHAB configurations/sitemaps directory
  file: >
    state=directory
    path={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations/sitemaps

- name: create openHAB configurations/templates directory
  file: >
    state=directory
    path={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations/templates

- name: sync setup into config
  template: dest={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations/{{item}} src=../templates/configurations/{{item}}
  with_items:
        - openhab.cfg
        - users.cfg
        - logback.xml
        - logback_debug.xml
        - items/huset.items
        - items/systeminfo.items
        - items/power.items
        - persistence/rrd4j.persist
        - persistence/influxdb.persist
        - persistence/logging.persist
        - persistence/myopenhab.persist
        - persistence/mqtt.persist
        - rules/garage.rules
        - rules/heating.rules
        - rules/lights.rules
        - rules/proximity.rules
        - rules/security.rules
        - rules/status.rules
        - rules/modes.rules
        - rules/power.rules
        - rules/plex.rules
        - scripts/pushMessages.script
        - sitemaps/huset.sitemap
        - transform/de.map
        - transform/en.map
        - transform/getBasicOnOffState.js
        - transform/getLastUpdate.js
        - transform/getLastValue.js
        - transform/getLevelValue.js
        - transform/getPowerValue.js
        - transform/getValValue.js
        - transform/motion.map
        - transform/no.map

- name: create openHAB configurations/transform directory
  file: >
    state=directory
    path={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations/transform

- name: sync transform setup into config
  copy: dest={{ openhab_install_dir }}/runtime/{{openhab_version}}/configurations/{{item}} src=../templates/configurations/{{item}}
  with_fileglob:
        - transform/*

- name: create openHAB static directory
  file: >
    state=directory
    path={{ openhab_install_dir }}/runtime/{{openhab_version}}/webapps/static
  
- name: sync uuid setup into config
  template: src=webapps/static/uuid dest={{ openhab_install_dir }}/runtime/{{openhab_version}}/webapps/static/uuid

- name: sync secret setup into config
  template: src=webapps/static/secret dest={{ openhab_install_dir }}/runtime/{{openhab_version}}/webapps/static/secret

- name: copy start.sh
  template: src=start.sh dest={{ openhab_install_dir }}/runtime/{{openhab_version}}/start.sh mode=0752

- name: make sure the user is in the dialout group
  shell: "usermod -a -G dialout boss"
  sudo: yes

- name: link openhab into home folder
  file: >
    state=link
    src={{ openhab_install_dir }}/runtime/{{openhab_version}}
    dest={{ ansible_env.HOME }}/openhab

- name: create logs folder if it does not exist
  file: >
    state=directory
    path={{ openhab_install_dir }}/logs
    

- name: link logs folder
  file: >
    state=link
    src={{ openhab_install_dir }}/logs
    dest={{ openhab_install_dir }}/runtime/{{openhab_version}}/logs

- name: create rrd4j folder if it does not exist
  file: >
    state=directory
    path={{ openhab_install_dir }}/rrd4j

- name: link rr4dj folder
  file: >
    state=link
    src={{ openhab_install_dir }}/rrd4j
    dest={{ openhab_install_dir }}/runtime/{{openhab_version}}/etc/rrd4j

- name: copy openhab file to folder
  template: src=../files/openhab dest=/etc/init.d/openhab
  sudo: yes

- name: give it correct access rights
  shell: "chmod a+x /etc/init.d/openhab"
  sudo: yes

- name: Add the openhab to rc.d
  shell: "update-rc.d openhab defaults"
  sudo: yes

- name: check current timezone
  shell: cat /etc/timezone
  register: current_zone

- name: Set timezone variables
  copy: content="Europe/Oslo"
    dest=/etc/timezone
    owner=root
    group=root
    mode=0644
    backup=yes
  sudo: yes

- name: update timezone
  command: dpkg-reconfigure --frontend noninteractive tzdata
  sudo: yes