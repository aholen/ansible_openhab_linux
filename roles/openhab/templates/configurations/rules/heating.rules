import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.*

rule "If the room is too cold and we are home, then heat it up, but only if it is less than 10 degrees outside"
	when
		Time cron "0 0/20 * * * ?" 
	then
		var double tempOffice = new Double(OfficeTemperature.state.toString())
		var double tempOutdoor = new Double(OutdoorTemperature.state.toString())
		var double tempBasement = new Double(BasementTemperature.state.toString())
		var double tempLivingroom = new Double(LivingRoomTemperature.state.toString())
		
		if (tempOutdoor <= 10) {
			if (gang_panelovn.state == OFF && mode.state == 0) {
				if (tempOffice < 17) {
					sendCommand(gang_panelovn, ON)
					sendCommand(kontor_panelovn, ON)	
				}
			}
			if (tempBasement < 16 && BasementTemperature.maximumSince(now.minusMinutes(21)).state >= 78) {
				pushover('Kjellertemp er nå: ' + tempBasement + " - den har gått fra " + BasementTemperature.maximumSince(now.minusMinutes(21)).state + " de siste 20 minuttene")
			}
			if (tempLivingroom < (new Double(ac_heat_temp.state.toString()) - 2) && mode.state == 0 && ac_scene.state != 1) {
				sendCommand(ac_scene, 1)
			} else if (tempLivingroom < (new Double(ac_night_temp.state.toString()) -1) && mode.state == 1 && ac_scene.state != 1) {
				sendCommand(ac_scene, 1)
			} else if (tempLivingroom < (new Double(ac_night_temp.state.toString()) -2) && mode.state == 2 && ac_scene.state != 1) {
				sendCommand(ac_scene, 1)
			}
					
		} else if (tempOutdoor > 10 && tempOutdoor <= 15) {
			if (tempLivingroom <= (new Double(ac_night_temp.state.toString()) -1))
				sendCommand(ac_scene, 1)
		}
		
		if (tempOutdoor >= 19 && ac_scene.state == 1)
			sendCommand(ac_scene , 0)
end

rule "When the error code from the AC changes, please let me know"
	when
		Item ac_error changed
	then
	pushover("AC Error changed to: " + ac_error.state.toString())
end

rule "AC scenes"
	when
		Item ac_scene  received command
then
	logInfo('org.openhab', 'AC received state:' + ac_scene.state)
	switch (receivedCommand) {
		case 0: { // OFF
			if (ac_power.state == ON)
				sendCommand(ac_power, OFF)
		}
		case 1: { // HEATING
			var double tempOutdoor = new Double(OutdoorTemperature.state.toString())
			var double lowerTempThreshold = new Double(AC_lower_temp_threshold.state.toString())
			var double additionalDegrees = new Double(AC_additional_degrees.state.toString())
			if (ac_power.state == OFF)
				sendCommand(ac_power, ON)
						
			// Set to heating if not already set
			if (ac_op_mode.state != 4)
				sendCommand(ac_op_mode, 4)
				
			// set direction
			if (ac_direction.state != 0)
				sendCommand(ac_direction, 0)
			
			// windlevel	
			if (ac_windlevel.state != 0)
				sendCommand(ac_windlevel, 0)

			// correct temperature
			if (mode.state == 0) { //HOME
				if (ac_set_temp.state != ac_heat_temp.state && tempOutdoor > lowerTempThreshold)
					sendCommand(ac_set_temp, ac_heat_temp.state.toString)
				else if (tempOutdoor <= lowerTempThreshold )
					sendCommand(ac_set_temp, (new Double(ac_heat_temp.state.toString) + additionalDegrees).toString())	
			} else if (mode.state == 1) { //NIGHT
				if (ac_night_temp.state != Uninitialized && ac_night_temp.state != ac_heat_temp.state) 
					sendCommand(ac_set_temp, ac_night_temp.state.toString)
				if (tempOutdoor <= lowerTempThreshold)
					sendCommand(ac_set_temp, (new Double(ac_night_temp.state.toString) + additionalDegrees).toString())
			} else { //AWAY
				if (ac_night_temp.state != Uninitialized && ac_night_temp.state != ac_heat_temp.state)
					sendCommand(ac_set_temp, ac_night_temp.state.toString)
					else if (tempOutdoor <= lowerTempThreshold)
					sendCommand(ac_set_temp, (new Double(ac_night_temp.state.toString) + additionalDegrees).toString())
			}
			
			if (tempOutdoor < lowerTempThreshold && mode.state == 0) {
				sendCommand(ac_mode, 5) // TURBO MODE
			} else {
				// Set to Off if tv is off, otherwise to QUIET
				if (tv_power.state == OFF || ac_mode.state != 0)
					sendCommand(ac_mode, 0)
				else if (tv_power.state == ON && ac_mode.state != 1)
					sendCommand(ac_mode, 1) // QUIET
			}
							
		}
		case 2: { // COOLING
			if (ac_power.state == OFF)
				sendCommand(ac_power, ON)
				
			// Set to Off if tv is off, otherwise to QUIET
			if (tv_power.state == OFF && ac_mode.state != 0)
				sendCommand(ac_mode, 0)
			else if (tv_power.state == ON && ac_mode.state != 1)
				sendCommand(ac_mode, 1) // QUIET
			
			// Set to cooling if not already set
			if (ac_op_mode.state != 1)
				sendCommand(ac_op_mode, 1)
				
			// set direction
			if (ac_direction.state != 0)
				sendCommand(ac_direction, 0)
			
			// windlevel	
			if (ac_windlevel.state != 0)
				sendCommand(ac_windlevel, 0)

			// correct temperature
			if (ac_set_temp.state != ac_cool_temp.state)
				sendCommand(ac_set_temp, ac_cool_temp.state.toString)	
		}
		case 3: { // AIR
			if (ac_power.state == OFF)
				sendCommand(ac_power, ON)
			sendCommand(ac_mode, 5) 
			
			// Set to wind if not already set
			if (ac_op_mode.state != 3)
				sendCommand(ac_op_mode, 3)
				
			// set direction
			if (ac_direction.state != 2)
				sendCommand(ac_direction, 2)
			
			// windlevel	
			if (ac_windlevel.state != 4)
				sendCommand(ac_windlevel, 4)

			// correct temperature
			if (ac_set_temp.state != ac_cool_temp.state)
				sendCommand(ac_set_temp, ac_cool_temp.state.toString)
		}
	}	
end

rule "AC changed from remote"
	when
		Item ac_power changed or
		Item ac_op_mode changed
	then
	if (ac_power.state == OFF) {
		postUpdate(ac_scene, 0) //OFF
	} else if (ac_op_mode.state == 1) {
		postUpdate(ac_scene, 2) // COOL
	} else if (ac_op_mode.state == 4) {
		postUpdate(ac_scene, 1) // HEAT
	} else if (ac_op_mode.state == 3 || ac_op_mode.state == 4){
		postUpdate(ac_scene, 3)
	}
end

