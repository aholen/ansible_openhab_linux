import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*

var Timer timerBathroom = null
var Timer timerBasement = null
var Timer timerGFHall = null
/* 
rule "send command from remote to living room light corner"
when
        Item remote_light_living_room_corner changed
then
        sendCommand(light_living_room_corner, remote_light_living_room_corner.state.toString)
end

rule "send command from remote to living room light window"
when
        Item remote_light_living_room_window changed
then
        sendCommand(light_living_room_window, remote_light_living_room_window.state.toString)
end

rule "send command from remote to basement light"
when
        Item remote_light_basement_power changed
then
        sendCommand(light_basement_power, remote_light_basement_power.state.toString)
end

rule "send command from remote to basement window light"
when
        Item remote_light_basement_window changed
then
        sendCommand(light_basement_window, remote_light_basement_window.state.toString)
end
*/
rule "scene for lights in living room"
when
	Item scene_light_livingroom received command
then
	logInfo('org.openhab', 'scene_light_livingroom received state:' + scene_light_livingroom.state)
	switch (receivedCommand) {
		case 0: { // OFF
			sendCommand(light_living_old, OFF)
			sendCommand(light_living_room_corner, OFF)
			sendCommand(light_living_room_window, OFF)
			sendCommand(light_kitchen_bench, OFF)
			sendCommand(light_dining_table, OFF)
			postUpdate(light_dining_table_dimmer, 0)
			
		}
		case 1: { // ON
			sendCommand(light_living_old, ON)
			sendCommand(light_living_room_window, ON)
			sendCommand(light_living_room_corner, ON)
			sendCommand(light_kitchen_bench, ON)
			sendCommand(light_dining_table, ON)
			postUpdate(light_dining_table_dimmer, 100)	
		}
		case 2: { // WATCHING A MOVIE
			sendCommand(light_living_old, ON)
			sendCommand(light_living_room_corner, OFF)
			sendCommand(light_living_room_window, OFF)
			sendCommand(light_kitchen_bench, OFF)
			sendCommand(light_dining_table, ON)
			sendCommand(light_dining_table_dimmer, 50)
				
		}
		case 3: {//EATING OR COOKING
			sendCommand(light_kitchen_bench, ON)
			sendCommand(light_dining_table, ON)
			postUpdate(light_dining_table_dimmer, 100)
			sendCommand(light_living_old, ON)
			sendCommand(light_living_room_corner, OFF)
			sendCommand(light_living_room_window, OFF)
		}
	}	
	logInfo('org.openhab', 'scene_light_livingroom update to: ' + scene_light_livingroom.state)
end

rule "change scene for lights in hall ground floor"
when
 	Item scene_light_hall_gf received command
then
 	switch(receivedCommand) {
 		case 0: {
 			sendCommand(light_hall_ground_floor, OFF)
 		}
 		case 1: {
 			sendCommand(light_hall_ground_floor, ON)
 		}
 		case 2: {
 			if (hall_gf_motion.state == ON)
 				sendCommand(light_hall_ground_floor, ON)
 			else
 				sendCommand(light_hall_ground_floor, OFF)
 		}
 	}
end
 

rule "motion detected in the ground floor hall" 
	when
		Item hall_gf_motion changed
	then
	logInfo('org.openhab', 'Motion sensor in the hall changed to: ' + hall_gf_motion.state)
	switch (hall_gf_motion.state as OnOffType) {
		case ON: {
			if (scene_light_hall_gf.state == 1 || scene_light_hall_gf.state == 2) {
				sendCommand(light_hall_ground_floor, ON)
				if (timerGFHall == null) {
					timerGFHall = createTimer(now.plusSeconds(60)) [|
						if(hall_gf_motion.state == ON) {
							timerGFHall.reschedule(now.plusSeconds(60))
						} else {
							sendCommand(light_hall_ground_floor, OFF)
						
							if (timerGFHall != null) {
								if(timerGFHall.running) {
									timerGFHall.cancel()
								}
								timerGFHall = null
							}
						}
					]
				} else {
					timerGFHall.reschedule(now.plusSeconds(60))
				}
			
			}
		}
		case OFF: {
			if (timerGFHall == null) {
				timerGFHall = createTimer(now.plusSeconds(30)) [|
					if(hall_gf_motion.state == ON) {
						timerGFHall.reschedule(now.plusSeconds(30))
					} else {
						if (scene_light_hall_gf.state == 0 || scene_light_hall_gf.state == 2)
							sendCommand(light_hall_ground_floor, OFF)
						
						if (timerGFHall != null) {
							if(timerGFHall.running) {
								timerGFHall.cancel()
							}
							timerGFHall = null
						}
					}
				]
			} else {
				timerGFHall.reschedule(now.plusSeconds(60))
			}
		}
	}
	logInfo('org.openhab', 'Motion sensor in the hall updated to: ' + hall_gf_motion.state)
end

rule "motion detected in the bathroom" 
	when
		Item bathroom_motion changed
	then
	logInfo('org.openhab', 'Motion sensor in the bathroom changed to: ' + bathroom_motion.state)
	switch (bathroom_motion.state as OnOffType) {
		case ON: {
			if (mode.state != 2) {
				if (mode.state == 0) { //HOME
					sendCommand(scene_bathroom_light, 2) //DAY
				} else {
					sendCommand(scene_bathroom_light, 1) // NIGHT
				}	
				if (timerBathroom == null) {
					timerBathroom = createTimer(now.plusSeconds(240)) [|
						logInfo("org.openhab", "Bathroom dimmer timer timed out, state for motion: '" + bathroom_motion.state)
						if (bathroom_motion.state == ON) {
							timerBathroom.reschedule(now.plusSeconds(240))
						} else {
							sendCommand(scene_bathroom_light, 0)
					
							if(timerBathroom!=null) {
								if(timerBathroom.running) {
									timerBathroom.cancel()
								}	
								timerBathroom = null
							}
						}
						]
				} else {
					timerBathroom.reschedule(now.plusSeconds(240))
					logInfo("org.openhab", "Bathroom dimmer timer rescheduled to 240 seconds from now")
				}
			}
		}
		case OFF: {
			if (timerBathroom == null) {
				timerBathroom = createTimer(now.plusSeconds(120)) [|
					logInfo("org.openhab", "Bathroom dimmer timer created by OFF-signal timed out, state for motion: '" + bathroom_motion.state)
					if (bathroom_motion.state == ON) {
						timerBathroom.reschedule(now.plusSeconds(120))
					} else {
						sendCommand(scene_bathroom_light, 0)
				
						if(timerBathroom!=null) {
							if(timerBathroom.running) {
								timerBathroom.cancel()
							}	
							timerBathroom = null
						}
					}
					]
			}
		}
	}
end

rule "light bathroom 1st floor" 
	when
		Item scene_bathroom_light received command
	then
	switch(receivedCommand) {
		case 0: {// OFF
			sendCommand(light_bathroom_mirror, OFF)
			sendCommand(light_bathroom, OFF)
			postUpdate(light_bathroom_dimmer, 0)
		}
		case 1: {//NIGHT
			sendCommand(light_bathroom_dimmer, 10)
		}
		case 2: {//DAY
			sendCommand(light_bathroom_dimmer, 60)
		
		}
		case 3: {//FULL
			sendCommand(light_bathroom_dimmer, 100)
			sendCommand(light_bathroom_mirror, ON)
		}
	}
end

rule "light dimmer bathroom received an update"
	when
		Item light_bathroom_dimmer received update
	then
		var Number percent = 0
		if(light_bathroom_dimmer.state instanceof DecimalType) percent = light_bathroom_dimmer.state as DecimalType
		logInfo('org.openhab',"Bathroom dimmer received UPDATE: '" + light_basement_dimmer.state + "' converted it to percentages: '" + percent + "'")
end
 
rule "light dimmer bathroom changed"
	when
		Item light_bathroom_dimmer received command
	then
		var Number percent = 0
		if(light_bathroom_dimmer.state instanceof DecimalType) percent = light_bathroom_dimmer.state as DecimalType
		
		logInfo('org.openhab',"Bathroom dimmer received command: '" + light_bathroom_dimmer.state + "' converted it to percentages: '" + percent + "'")
		
		if (percent > 100) percent = 100
		if (percent < 0) percent = 0
		
		if(percent == 0 && light_bathroom.state == ON) {
			postUpdate(light_bathroom, OFF)
			postUpdate(scene_bathroom_light, 0)
		}
		else if (percent > 0 && light_bathroom.state == OFF) {
			postUpdate(light_bathroom, ON)
			if (percent < 30)
				postUpdate(scene_bathroom_light, 1) //NIGHT
			else
				postUpdate(scene_bathroom_light, 2) //DAY						
		}
		
		//logInfo('org.openhab', 'Dimming from OpenHab, changed to ' + light_bathroom_dimmer.state)
		var String htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B14%5D.SwitchMultilevel.Set(" + percent.toString + ")"
		
		sendHttpGetRequest(htp)
		logInfo('org.openhab', 'Bathroom dimmer sent request: ' + htp)
end

rule "light dimmer living room received an update"
	when
		Item light_dining_table_dimmer received update
	then
		var Number percent = 0
		if(light_dining_table_dimmer.state instanceof DecimalType) percent = light_dining_table_dimmer.state as DecimalType
		logInfo('org.openhab',"Dining table dimmer received UPDATE: '" + light_dining_table_dimmer.state + "' converted it to percentages: '" + percent + "'")
end
 
rule "light dimmer dining table changed"
	when
		Item light_dining_table_dimmer received command
	then
		var Number percent = 0
		if(light_dining_table_dimmer.state instanceof DecimalType) percent = light_dining_table_dimmer.state as DecimalType
		logInfo('org.openhab',"Bathroom dimmer received command: '" + light_dining_table_dimmer.state + "' converted it to percentages: '" + percent + "'")
		
		if (percent > 100) percent = 100
		if (percent < 0) percent = 0
		
		if(percent == 0 && light_dining_table.state == ON) {
			postUpdate(light_dining_table, OFF)
		} else if (percent > 0 && light_dining_table.state == OFF) {
			postUpdate(light_dining_table, ON)						
		}
		
		//logInfo('org.openhab', 'Dimming from OpenHab, changed to ' + light_bathroom_dimmer.state)
		var String htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B22%5D.SwitchMultilevel.Set(" + percent.toString + ")"
		
		sendHttpGetRequest(htp)
		logInfo('org.openhab', 'Bathroom dimmer sent request: ' + htp)
end

rule "light in hall 1st floor"
	when
		Item scene_light_hall received command
	then
	switch (receivedCommand) {
		case 0:  { //OFF 
			sendCommand(light_hall_1, 0)
			sendCommand(light_hall_2, 0)
			sendCommand(light_hall_3, 0)
			sendCommand(light_hall_4, 0)
		}
		case 1: { //ON
			sendCommand(light_hall_1, 100)
			sendCommand(light_hall_2, 100)
			sendCommand(light_hall_3, 100)
			sendCommand(light_hall_4, 100)
		}
		case 2: { //NIGHT MODE
			sendCommand(light_hall_1, 0)
			sendCommand(light_hall_2, 30)
			sendCommand(light_hall_3, 30)
			sendCommand(light_hall_4, 0)
		}
	}
end

rule "lights in hall changed from other source"
	when
		Item light_hall_1 received update or
		Item light_hall_2 received update or
		Item light_hall_3 received update or
		Item light_hall_4 received update
	then
	if (light_hall_1.state == 0 && light_hall_2.state == 0 && light_hall_3.state == 0 && light_hall_4.state == 0) {
		postUpdate(scene_light_hall, 0)
	} else if (light_hall_1.state == 100 && light_hall_2.state == 100 && light_hall_3.state == 100 && light_hall_4.state == 100) {
		postUpdate(scene_light_hall, 1)
	} else {
		postUpdate(scene_light_hall, 2)
	}
end

rule "light in basement hall"
	when
		Item scene_light_basement received command
	then
	switch (receivedCommand) {
		case 0:  { //OFF 
			sendCommand(light_basement_1, 0)
			sendCommand(light_basement_2, 0)
			sendCommand(light_basement_3, 0)
			sendCommand(light_basement_4, 0)
		}
		case 1: { //ON
			sendCommand(light_basement_1, 100)
			sendCommand(light_basement_2, 100)
			sendCommand(light_basement_3, 100)
			sendCommand(light_basement_4, 100)
		}
		case 2: { //NIGHT MODE
			sendCommand(light_basement_1, 30)
			sendCommand(light_basement_2, 30)
			sendCommand(light_basement_3, 30)
			sendCommand(light_basement_4, 30)
		}
	}
end

rule "lights in basement hall changed from other source"
	when
		Item light_basement_1 received update or
		Item light_basement_2 received update or
		Item light_basement_3 received update or
		Item light_basement_4 received update
	then
	if (light_basement_1.state == 0 && light_basement_2.state == 0 && light_basement_3.state == 0 && light_basement_4.state == 0) {
		postUpdate(scene_light_basement, 0)
	} else if (light_basement_1.state == 100 && light_basement_2.state == 100 && light_basement_3.state == 100 && light_basement_4.state == 100) {
		postUpdate(scene_light_basement, 1)
	} else {
		postUpdate(scene_light_basement, 2)
	}
end

rule "Motion detector in basement wants to turn on the lights"
	when
	 	Item motion_detector_basement changed
	then
		switch (motion_detector_basement.state as OnOffType) {
		case ON: {
			if (timerBasement == null) {
				timerBasement = createTimer(now.plusSeconds(600)) [|
					logInfo("org.openhab", "Basement light timer created by OFF-signal timed out, state for motion: '" + motion_detector_basement.state)
					sendCommand(motion_detector_basement, OFF)
				
					if(timerBasement!=null) {
						if(timerBasement.running) {
							timerBasement.cancel()
						}	
						timerBasement = null
					}
					]
			} else
				timerBasement.reschedule(now.plusSeconds(600))
			if (mode.state == 0) // HOME
				sendCommand(scene_light_basement, 1) // ON
			else if (mode.state == 1 || mode.state == 3) // NIGHT OR EVENING MODE
				sendCommand(scene_light_basement, 2) // NIGHT MODE
			else { //AWAY
				pushover('Bevegelse i kjelleren...')
			}
		}
		case OFF: {
			sendCommand(scene_light_basement, 0) // OFF
			if(timerBasement!=null) {
				if(timerBasement.running) {
					timerBasement.cancel()
				}	
				timerBasement = null
			}
		}
	}
end

rule "Remote in living room"
	when
        Item scene_remote_livingroom changed or
        Item scene_remote_livingroom received update
    then
	    switch (scene_remote_livingroom.state) {
	    	case 0: {
	    		// NOTHING
	    	}
            case 1:  { // LIGHTS ON
	            sendCommand(scene_light_livingroom, 1)
            }
            case 2: { // ONLY LIVING ROOM, not kitchen
                sendCommand(scene_light_livingroom, 2)
            }
            case 3: { // LIGHTS OFF
                sendCommand(scene_light_livingroom, 0)
            }
            case 4: { // Kitchen not living room
                sendCommand(scene_light_livingroom, 3)
            } 
            default: {
            	pushover('Fikk en rar update fra fjernkontrollen: ' + scene_remote_livingroom.state.toString)
            }
    }
    // Set it to 0, so that all changes are considered
    if (scene_remote_livingroom.state != 0)
    	postUpdate(scene_remote_livingroom, 0)
end


rule "Motion detector outdoor halloween"
	when
	 	Item motion_detector_outdoor changed
	then
		switch (motion_detector_outdoor.state as OnOffType) {
		case ON: {
			if (timerBasement == null) {
				timerBasement = createTimer(now.plusSeconds(600)) [|
					sendCommand(motion_detector_outdoor, OFF)
				
					if(timerBasement!=null) {
						if(timerBasement.running) {
							timerBasement.cancel()
						}	
						timerBasement = null
					}
					]
			} else {
				timerBasement.reschedule(now.plusSeconds(600))
				sendCommand(scene_halloween, 2) 
			}
		}
		case OFF: {
			sendCommand(scene_halloween, 1) // OFF
			if(timerBasement!=null) {
				if(timerBasement.running) {
					timerBasement.cancel()
				}	
				timerBasement = null
			}
		}
	}
end

rule "Scene halloween changed" 
	when
		Item scene_halloween changed
	then
		if (enable_halloween.state == ON) {
			switch (scene_halloween.state) {
	    		case 0: {
	    			// OFF
	    		}	
	    		case 1: {
	    			// NORMAL LIGHTS
	    			sendCommand(light_11, OFF)
	    			sendCommand(light_9, OFF)
	    			sendCommand(light_10, OFF)
	    			sendCommand(light_11, ON)
	    			sendCommand(light_9, ON)
	    			sendCommand(light_10, ON)
	    			var DecimalType hue = new DecimalType(150) // 0-360; 0=red, 120=green, 240=blue, 360=red(again)
					var PercentType sat = new PercentType(100) // 0-100
					var PercentType bright = new PercentType(100) // 0-100
					var HSBType light = new HSBType(hue,sat,bright)
					sendCommand(color_9, light)
					sendCommand(color_10, light)
					sendCommand(color_11, light)
	    		}
	    		case 2: {
	    			// HALLOWEEN LIGHTS
	    			var DecimalType hue = new DecimalType(360) // 0-360; 0=red, 120=green, 240=blue, 360=red(again)
					var PercentType sat = new PercentType(80) // 0-100
					var PercentType bright = new PercentType(70) // 0-100
					var HSBType light = new HSBType(hue,sat,bright)
					sendCommand(color_9, light)
					sendCommand(color_10, light)
					sendCommand(color_11, light)
	    		}
	    	}
	    }
end
