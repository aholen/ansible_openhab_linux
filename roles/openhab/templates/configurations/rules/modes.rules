import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Map
import org.joda.time.DateTime

var Map stored_states = null
var Timer night_timer = null

rule "A change of mode"
	when
		Item mode received command
	then
	logInfo('org.openhab', 'mode received state:' + mode.state)
	switch (receivedCommand) {
		case 0: { // HOME
			logInfo('org.openhab', 'HOME MODE')
			restoreStates(stored_states)
			if (new Double(OutdoorTemperature.state.toString()) < 10) {
				sendCommand(ac_scene, 1)
			}
			
			if (previous_mode.state == 2) {
				var t = ""
				if (garage_door_1.state == ON || garage_door_2.state == ON) {
					if (garage_door_1.state == ON) t = "Leafs"
					if (garage_door_2.state == ON) {
						if (t.length() > 0)
					  		t = t + " og " 
						t = t + "Mondeos"
					}	 
					t = t + " garasjeport er ikke lukket. "
				
				
				t = "Velkommen hjem! Nå " + OutdoorTemperature.state.format("%.1f") + " °C ute, og " 
					+ LivingRoomTemperature.state.format("%.1f") + " °C i stua. "
					+ t
				}
				sendCommand(guest_home, ON)
				if (dryer.state == ON) {
					t = t + "Tørketrommelen ble startet igjen. "
				}
				if (t.length() > 0)
					postUpdate(push_message_text, t)
			}
		}
		
		case 1: { // NIGHT
			logInfo('org.openhab', 'NIGHT MODE')
			stored_states = storeStates(night_group)
			if (sensor_1_motion.state == OFF)
				sendCommand(scene_light_livingroom, 0)
			sendCommand(light_basement_power, OFF)
			sendCommand(kontor_panelovn, OFF)
			sendCommand(gang_panelovn, OFF)
			sendCommand(scene_light_hall, 2) // NIGHT
		
			if (dryer.state == ON && new Double(power_dryer.state.toString()) > 10) {
				postUpdate(push_message_text, "Husk tørketrommelen før du legger deg")
			}
			if (tv_power.state == ON) {
				sendCommand(tv_power, OFF)
			}
			if (ac_scene.state == 1 && ac_night_temp.state != Uninitialized) {
				sendCommand(ac_set_temp, ac_night_temp.state.toString)
			} else if (ac_scene.state > 1)
				sendCommand(ac_scene, 0)
		}
		
		case 2: { //AWAY
			logInfo('org.openhab', 'AWAY MODE')
			var t = ""
			if (OutdoorTemperature.state instanceof DecimalType) {
				t  = "Du dro kl: " + now.getHourOfDay + ":" + now.getMinuteOfHour + ", nå er det " + OutdoorTemperature.state.format("%.1f") + " °C ute."
			}
			stored_states = storeStates(away_group)
			if (dryer.state == ON && new Double(power_dryer.state.toString()) > 10) {
				t = t + " Tørketrommelen ble skrudd av nå når du dro hjemmefra."
				sendCommand(dryer, OFF)
			}
			if (tv_power.state == ON) {
				t = t + " TV-en ble skrudd av når du dro hjemmefra."
				sendCommand(tv_power, OFF)
			}
			if (t.length() > 0)
				postUpdate(push_message_text, t)
			sendCommand(guest_home, OFF)
			sendCommand(light_basement_power, OFF)
			sendCommand(kontor_panelovn, OFF)
			sendCommand(gang_panelovn, OFF)
			sendCommand(scene_light_livingroom, 0)
			sendCommand(scene_light_hall, 0)
			sendCommand(scene_light_basement, 0)
			sendCommand(light_bathroom, OFF)
			if (ac_scene.state == 1 && ac_night_temp.state != Uninitialized) {
				sendCommand(ac_set_temp, ac_night_temp.state.toString)
			} else if (ac_scene.state > 1) {
				sendCommand(ac_scene, 0)
			}
		}
		
		case 3: { // EVENING MODE
			sendCommand(scene_light_hall, 2) // NIGHT
		}
	}
	postUpdate(previous_mode, mode.state.toString)
end

/*
 * At 20 in the evening we'll go into evening mode, but only if someone is at home.
 * Away mode overrules evening mode
 */
rule "Switch to night mode in the evening"
	when
		Time cron "0 0 20 ? * *" 
	then
		if (mode.state == 0) {
			sendCommand(mode, 3)
		}
end

/*
 * At 01:00 in the evening we'll go into night mode, but only if someone is at home.
 * Away mode overrules night mode
 */
rule "Switch to night mode in the evening"
	when
		Time cron "0 0 1 ? * *" 
	then
		if (mode.state == 0 || mode.state == 3) {
			if (tv_power.state == ON || sensor_1_motion.state == ON) {
				// If TV is still on or there's someone in the living room, we'll wait a bit before going into night mode
				night_timer = createTimer(now.plusSeconds(360)) [|
					if (tv_power.state == ON || sensor_1_motion.state == ON) {
						night_timer.reschedule(now.plusSeconds(360))
					} else {
						if (mode.state == 0 || mode.state == 3) {
							sendCommand(mode, 1)
						}
				
						if(night_timer!=null) {
							if(night_timer.running) {
								night_timer.cancel()
							}	
							night_timer = null
						}
					}
					]
			} else {
				sendCommand(mode, 1)
			}
		}
end


/*
 * We'll return to day mode again, but only if we are at home.
 */
rule "Return to day mode during the week"
	when
		Time cron "0 30 5 ? * MON-FRI"
	then
		if (mode.state == 1) {
			sendCommand(mode, 0)
		}
end

rule "Return to day mode during weekend"
	when
		Time cron "0 0 7 ? * SAT-SUN"
	then
		if (mode.state == 1) {
			sendCommand(mode, 0)
		}
end